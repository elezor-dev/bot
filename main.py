from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, \
    KeyboardButton, InlineKeyboardMarkup, \
	InlineKeyboardButton, ReplyKeyboardRemove
from random import randint
import random
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor
from aiogram.dispatcher.filters import BoundFilter
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware


class IsAdminFilter(BoundFilter):
    key = "is_admin"
    
    def __init__(self, is_admin):
        self.is_admin = is_admin
    
    async def check(self, message: types.Message):
        member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
        return member.is_chat_admin()



TOKEN = '1846763082:AAHMJHoMRyrVgd-HT2Z9tAoGJIJB-aqLjB0'#–∏ –¥–∞ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
SUCCED = '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ!'


bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

dp.filters_factory.bind(IsAdminFilter)

@dp.message_handler(commands=['start'])
async def cmd_test(message: types.Message):
    # You can use this command every 5 seconds
    await message.reply("""–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç
–ü–æ–º–æ—â—å: /help""")

@dp.message_handler(commands=["rules"])
async def rules(msg: types.Message):
    await msg.reply("https://telegra.ph/Pravila-06-25-8")

@dp.message_handler(commands=["help"])
async def help(msg: types.Message):
    await msg.reply("""<b>‚ù§Ô∏è ||–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤|| ‚ù§Ô∏è </b>
–º—É—Ç/mute | —Ä–∞–∑–≥–ª—É—à–∏—Ç—å/unmute | –±–∞–Ω/–±–∞–Ω–∞–Ω/ban | —Ä–∞–∑–±–∞–Ω/unban | —É–¥–æ–ª–∏—Ç—å/deleate |
<b>‚ù§Ô∏è || —Ä–ø –∫–æ–º–∞–Ω–¥—ã || ‚ù§Ô∏è</b>
—Å–Ω—è—Ç—å —à—Ç–∞–Ω—ã |–≤—ã–µ–±–∞—Ç—å | –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å""", parse_mode = 'HTML')


@dp.message_handler(content_types=["new_chat_members"])
async def new(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Å—Ç–≤—É—é —Ç–µ–±—è " + message.from_user.first_name + " –≤ –Ω–∞—à–µ–º —É—é—Ç–Ω–æ–º —á–∞—Ç–µ –Ω–æ –ø—Ä–æ—à—É —Ç–µ–±—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ /rules")

@dp.message_handler(content_types=["left_chat_member"])
async def left(message: types.Message):
    await message.reply("–£—Ö–æ–¥–∏ —É–µ–±–∏—â–µ, –±–µ–∑ —Ç–µ–±—è –±—ã–ª–æ –ª—É—á—à–µ.")

@dp.message_handler(Text("–ë–æ—Ç",ignore_case=True))
async def pong(msg: types.Message):
    await msg.reply("–µ–ø—Ç, –∑–∞–µ–±–∞–ª–∏, —è –≤ –æ—Ç–ø—É—Å–∫–µ...")

@dp.message_handler(is_admin=True, commands=["mute","–º—É—Ç"], commands_prefix="!")
async def mute(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ !")
        return

    user = await message.bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if user.is_chat_admin():
        await message.reply("–ù–µ –±—Ä–æ, —è –Ω–µ –±—É–¥—É –≥–ª—É—à–∏—Ç—å –∞–¥–º–∏–Ω–∞.")
        return
    
    await message.bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions())
    
    await message.reply("–£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–≥–ª—É—à–µ–Ω !")

@dp.message_handler(is_admin=True, commands=["unmute","—Ä–∞–∑–≥–ª—É—à–∏—Ç—å"], commands_prefix="!")
async def unmute(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ !")
        return
    
    await message.bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(True))
    
    await message.reply(f"–û–ö. {message.reply_to_message.from_user.first_name} –º–æ–∂–µ—Ç —Å–ø–æ–∫–æ–π–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å, –Ω–æ –ø—É—Å—Ç—å –ø—Ä–∏–¥–µ—Ä–∂–∏—Ç —è–∑—ã–∫ –∑–∞ –∑—É–±–∞–º–∏.")

@dp.message_handler(is_admin=True, commands=["ban","–±–∞–Ω"], commands_prefix="!")
async def ban(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ !")
        return

    user = await message.bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if user.is_chat_admin():
        await message.reply("–ù–µ –±—Ä–æ, —è –Ω–µ –±—É–¥—É –±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞.")
        return

    await message.bot.delete_message(message.chat.id, message.message_id)
    await message.bot.kick_chat_member(chat_id=message.chat.id, user_id=message.reply_to_message.from_user.id)
    
    await message.reply_to_message.reply("–ß–µ–ª–∏–∫ –∑–∞–±–∞–Ω–µ–Ω !")

@dp.message_handler(is_admin=True, commands=["unban","—Ä–∞–∑–±–∞–Ω"], commands_prefix="!")
async def unban(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ !")
        return
    
    await message.bot.unban_chat_member(chat_id=message.chat.id, user_id=message.reply_to_message.from_user.id)
    
    await message.reply_to_message.reply("–ß–µ–ª–∏–∫ —Ä–∞–∑–±–∞–Ω–µ–Ω –∏ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ !")

@dp.message_handler(is_admin=True, commands=['deleate',"—É–¥–∞–ª–∏—Ç—å"], commands_prefix="!")
async def delete_message(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ !")
        return

    user = await message.bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if user.is_chat_admin():
        await message.reply("–ù–µ –±—Ä–æ, —è –Ω–µ –±—É–¥—É —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞.")
        return

    await message.reply_to_message.delete()
    await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ !")

@dp.message_handler(Text("–ï–±–Ω—É—Ç—å",ignore_case=True))
async def pong(msg: types.Message):
    await msg.reply('üí•' + random.choice(ebt))

@dp.message_handler(Text("–ö—É",ignore_case=True))
async def pong(msg: types.Message):
    await msg.reply(random.choice(ku))

@dp.message_handler(Text("–î—Ä–æ—á–∏—Ç—å",ignore_case=True))
async def pong(msg: types.Message):
    await msg.reply('üîû –¢—ã –∫–æ–Ω—á–∏–ª –∑–∞ ' + str(randint(0,10000)) + " –º–∏–Ω—É—Ç")

@dp.message_handler(Text("–≤—ã–µ–±–∞—Ç—å",ignore_case=True))
async def sex2(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ !")
        return
    
    await message.answer(f"""<a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a> —Ç—Ä–∞—Ö–Ω—É–ª(–∞) <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>""", parse_mode = "html")

@dp.message_handler(Text("—É–±–∏—Ç—å",ignore_case=True))
async def sex2(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ !")
        return
    
    await message.answer(f"""<a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a> —É–±–∏–ª(–∞) <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>""", parse_mode = "html")

@dp.message_handler(Text("—Å–Ω—è—Ç—å —à—Ç–∞–Ω—ã",ignore_case=True))
async def sex2(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ !")
        return
    
    await message.answer(f"""<a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a> —Å–Ω—è–ª(–∞) —à—Ç–∞–Ω—ã —É <a href="tg://user?id={message.reply_to_message.from_user.id}">–î–∞—É–Ω–∞</a>""", parse_mode = "html")

#–õ–∏—Å—Ç–∏–∫ —Ñ—Ä–∞–∑ 

ku = ['üëã –î–∞—Ä–æ–≤–∞', 'üëã –ö—É', 'üëã –ü—Ä–∏–≤–µ—Ç', 'üëã –°–∞–ª—è–º –ê–ª–µ–π–∫—É–º', 'üëã Hi!', 'üëã Hello', 'üëã –®–∞–ª–∞–º']

ebt = ['–ï–±–Ω—É–ª –∫–∞–∫ –ø–æ–¥—É—à–∫–∞ –æ–± –ª–∏—Ü–æ, –ª–æ—Ö', '–£–¥–∞—Ä –æ—Ç—Ä–∞–∂–µ–Ω, –ª–æ—Ö, –ø–∏–¥—Ä.', '–û—Ç—Ä–∞–∑–∏–ª', '–ë–µ–¥–Ω—ã–π —á–µ–ª, –∑–∞—á–µ–º —Ç—ã –µ–≥–æ —Ç–∞–∫...']

if __name__ == '__main__':
    executor.start_polling(dp)
